// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  userType  UserType
  kycStatus KYCStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vendor    Vendor?
  client    Client?
}

model Vendor {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  companyName String
  bankDetails String
  transactions Transaction[]
}

model Client {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  companyName   String
  creditLimit   Float
  creditScore   Int
  transactions  Transaction[]
}

model Transaction {
  id            String   @id @default(uuid())
  vendorId      String
  vendor        Vendor   @relation(fields: [vendorId], references: [id])
  clientId      String
  client        Client   @relation(fields: [clientId], references: [id])
  amount        Float
  status        TransactionStatus
  dueDate       DateTime
  repaidDate    DateTime?
  interestRate  Float    @default(0.12)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum UserType {
  VENDOR
  CLIENT
}

enum KYCStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionStatus {
  PENDING
  APPROVED
  REPAID
  DEFAULTED
}